name: Build and Deploy to Server

on:
  push:
    branches:
      - master

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.2

      - name: Configure AWS credentials
        id: ecr
        uses: aws-actions/configure-aws-credentials@v4.1.0
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v2.0.1

      - id: docker-tag
        uses: yuya-takeyama/docker-tag-from-github-ref-action@v1

      - name: Build Docker image
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: iot/images
          IMAGE_TAG: ${{ steps.docker-tag.outputs.tag }}
        run: |
          echo "Building Docker image..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Docker image pushed to ECR"

      - name: Deploy to EC2 instance
        env:
          ECR_REGISTRY: ${{ steps.ecr-login.outputs.registry }}
          ECR_REPOSITORY: iot/images
          IMAGE_TAG: ${{ steps.docker-tag.outputs.tag }}
        run: |
          echo "Deploying to EC2 instance..."
          ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ubuntu@${{ secrets.SERVER_HOST }} << 'EOF'
              docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              docker stop iot-server || true
              docker rm iot-server || true
              docker run -d --name iot-server -e MQTT_USERNAME=${{ secrets.MQTT_USERNAME }} -e MQTT_PASSWORD=${{ secrets.MQTT_PASSWORD }} -p 80:8090 $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          EOF
          echo "Deployment completed"
